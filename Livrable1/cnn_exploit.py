from keras.layers import Dropout
from keras.models import Sequential
from keras.layers import MaxPooling2D
from keras.layers import Convolution2D
from keras.layers import Flatten
from keras.layers import Dense
import keras.activations

from datetime import datetime



def main():

    now = datetime.now()
    # initialize CNN
    convolutional_neural_network = Sequential()
    
    #STEP 1 : CONVOLUTION 
    
    #kernal size = features detector (matrix)
    #stride = pas de mouvement du features detector
    #input shape => taille des images et nombres de dimensions
    #activation => fonction d'activation

    convolutional_neural_network.add(Convolution2D(filters=64, kernel_size=3, strides=1, input_shape = (128,128,3), activation="relu"))
    
    #STEP 2 : POOLING 
    
    #pool_size => taille de la matrice de pooling (de base 2)
    #strides => pas du mouvement du pooling matrix (2)

    convolutional_neural_network.add(MaxPooling2D(pool_size=(2,2)))


    #STEP 2.b => SECOND CONVOLUTION and POOLING  

    convolutional_neural_network.add(Convolution2D(filters=32, kernel_size=3, strides=1, activation="relu"))

    convolutional_neural_network.add(MaxPooling2D(pool_size=(2,2)))

    #STEP 3 : FLATTENING

    convolutional_neural_network.add(Flatten())

    #STEP 4 : ANN

    convolutional_neural_network.add(Dense(units=256, activation="relu"))   
    
    convolutional_neural_network.add(Dropout(0.2))

    convolutional_neural_network.add(Dense(units=4, activation=keras.activations.softmax))

    #COMPILATION 

    convolutional_neural_network.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])

    #ENTRAINEMENT

    

    from keras.preprocessing.image import ImageDataGenerator
    train_datagen = ImageDataGenerator(
            rescale=1./255,
            shear_range=0.2,
            zoom_range=0.2,
            horizontal_flip=True
            )

    test_data_datagen = ImageDataGenerator(rescale=1./255)
    training_set = train_datagen.flow_from_directory(
            '../Dataset/train_set',
            target_size= (128,128),
            batch_size=32)


    test_set = train_datagen.flow_from_directory(
            '../Dataset/test_set',
            target_size= (128,128),
            batch_size=32)
   

    convolutional_neural_network.fit(
            training_set,
            steps_per_epoch=(25124//32),
            epochs=25,
            validation_data=test_set,
            validation_steps=(6282//32)
            )
    

    convolutional_neural_network.save('./Model/CNNPainting.h5')
            


if __name__ == '__main__':
    main()
